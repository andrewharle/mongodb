# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# applyOps IDL File

global:
    cpp_namespace: "mongo::repl"

imports:
    - "mongo/idl/basic_types.idl"

structs:
    ApplyOpsCommandInfoBase:
        description: A document that represents an applyOps command.
        immutable: true
        strict: false
        fields:
            applyOps:
                cpp_name: operations
                type: array<object>
                description: "The operations to apply"

            allowAtomic:
                cpp_name: allowAtomic
                type: bool
                default: true
                description: "If 'allowAtomic' is true, applyOps() determines if all the given
                              operations can be processed inside one WriteUnitOfWork. Set this flag
                              to false to disable this 'atomic' mode."

            alwaysUpsert:
                cpp_name: alwaysUpsert
                type: bool
                default: true
                description: "Affects update operations. Set 'alwaysUpsert' to false in the command
                              object to never insert a new document if no document matches the query
                              criteria in an update operation."

            preCondition:
                cpp_name: preCondition
                type: array<object>
                optional: true
                description: "applyOps supports checking the documents of existing collections
                              before proceeding to execute the given operations. This flag is set to
                              true if the 'preCondition' option is provided."
