This patch applies the fix from SERVER-24400 to all solaris. The same issue as SERVER-24400
manifests on newer oversions of the Illumos kernel, and applying the same fix as we did on aarch64
solves the issue.

diff --git a/src/third_party/mozjs-45/extract/js/src/gc/Memory.cpp b/src/third_party/mozjs-45/extract/js/src/gc/Memory.cpp
index 3644d2b..2409b5c 100644
--- a/src/third_party/mozjs-45/extract/js/src/gc/Memory.cpp
+++ b/src/third_party/mozjs-45/extract/js/src/gc/Memory.cpp
@@ -464,7 +464,7 @@ static inline void*
 MapMemory(size_t length, int prot = PROT_READ | PROT_WRITE,
           int flags = MAP_PRIVATE | MAP_ANON, int fd = -1, off_t offset = 0)
 {
-#if defined(__ia64__) || (defined(__sparc64__) && defined(__NetBSD__)) || defined(SOLARIS)
+#if defined(__ia64__) || (defined(__sparc64__) && defined(__NetBSD__))
     /*
      * The JS engine assumes that all allocated pointers have their high 17 bits clear,
      * which ia64's mmap doesn't support directly. However, we can emulate it by passing
@@ -491,7 +491,7 @@ MapMemory(size_t length, int prot = PROT_READ | PROT_WRITE,
         return nullptr;
     }
     return region;
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || defined(SOLARIS)
    /*
     * There might be similar virtual address issue on arm64 which depends on
     * hardware and kernel configurations. But the work around is slightly
