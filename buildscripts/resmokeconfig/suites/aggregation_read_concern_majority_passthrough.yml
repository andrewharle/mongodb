test_kind: js_test

selector:
  roots:
  - jstests/aggregation/**/*.js
  exclude_files:
  - jstests/aggregation/extras/*.js
  - jstests/aggregation/data/*.js
  # This test specifies a $out stage not as the last stage in the aggregation pipeline, causing a
  # non-local readConcern to erroneously be sent with the command.
  - jstests/aggregation/sources/out/required_last_position.js
  # These tests fail due to the inability to specify a writeConcern when secondaryThrottle is not
  # set as part of the moveChunk command.
  - jstests/aggregation/mongos_merge.js
  - jstests/aggregation/shard_targeting.js
  - jstests/aggregation/sources/facet/use_cases.js
  # These test fail because afterOpTime is required to guarantee a secondary has advanced its
  # majority-committed snapshot.
  - jstests/aggregation/mongos_slaveok.js
  - jstests/aggregation/testSlave.js
  exclude_with_any_tags:
  ##
  # The next three tags correspond to the special errors thrown by the
  # set_read_and_write_concerns.js override when it refuses to replace the readConcern or
  # writeConcern of a particular command. Above each tag are the message(s) that cause the tag to be
  # warranted.
  ##
  # "Cowardly refusing to override read concern of command: ..."
  - assumes_read_concern_unchanged
  # "Cowardly refusing to override write concern of command: ..."
  - assumes_write_concern_unchanged
  # "Cowardly refusing to run test with overridden write concern when it uses a command that can
  #  only perform w=1 writes: ..."
  - requires_eval_command

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckReplOplogs
      - ValidateCollections
  config:
    shell_options:
      global_vars:
        TestData:
          defaultReadConcernLevel: majority
          enableMajorityReadConcern: ''
      eval: >-
        var testingReplication = true;
        load('jstests/libs/override_methods/set_read_and_write_concerns.js');
      readMode: commands
  hooks:
  # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
  # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
  # validating the entire contents of the collection.
  - class: CheckReplOplogs
  - class: CheckReplDBHash
  - class: ValidateCollections
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      enableMajorityReadConcern: ''
      set_parameters:
        enableTestCommands: 1
        numInitialSyncAttempts: 1
    num_nodes: 2
