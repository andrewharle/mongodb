Source: mongodb
Section: database
Priority: optional
Maintainer: Antonin Kral <A.Kral@sh.cvut.cz>
Uploaders: Roberto C. Sanchez <roberto@connexer.com>
Build-Depends: debhelper (>= 7), libpcre3, libpcre3-dev, scons, xulrunner-dev (>= 1.9) | xulrunner-1.9-dev | xulrunner-1.9.1-dev, libboost1.42-dev | libboost1.40-dev | libboost1.35-dev | libboost1.37-dev | libboost1.38-dev, libboost-thread1.42-dev | libboost-thread1.40-dev | libboost-thread1.38-dev | libboost-thread1.37-dev | libboost-thread1.35-dev, libboost-filesystem1.42-dev | libboost-filesystem1.40-dev | libboost-filesystem1.38-dev | libboost-filesystem1.37-dev | libboost-filesystem1.35-dev, libboost-program-options1.42-dev | libboost-program-options1.40-dev | libboost-program-options1.38-dev | libboost-program-options1.37-dev | libboost-program-options1.35-dev, libboost-date-time1.42-dev | libboost-date-time1.40-dev | libboost-date-time1.38-dev | libboost-date-time1.37-dev | libboost-date-time1.35-dev
Standards-Version: 3.8.4
Homepage: http://www.mongodb.org

Package: mongodb
Architecture: i386 amd64
Depends: mongodb-server, mongodb-dev, ${shlibs:Depends}, ${misc:Depends}
Description: An object/document-oriented database (meta package)
 MongoDB is a high-performance, open source, schema-free 
 document-oriented  data store that's easy to deploy, manage
 and use. It's network accessible, written in C++ and offers
 the following features :
 .
    * Collection oriented storage - easy storage of object-
      style data
    * Full index support, including on inner objects
    * Query profiling
    * Replication and fail-over support
    * Efficient storage of binary data including large 
      objects (e.g. videos)
    * Auto-sharding for cloud-level scalability (Q209)
 .
 High performance, scalability, and reasonable depth of
 functionality are the goals for the project.
 .
 This is a meta package that depends on all the mongodb parts.

Package: mongodb-server
Architecture: i386 amd64
Depends: mongodb-clients, ${shlibs:Depends}, ${misc:Depends}, adduser
Description: An object/document-oriented database (server package)
 MongoDB is a high-performance, open source, schema-free 
 document-oriented  data store that's easy to deploy, manage
 and use. It's network accessible, written in C++ and offers
 the following features :
 .
    * Collection oriented storage - easy storage of object-
      style data
    * Full index support, including on inner objects
    * Query profiling
    * Replication and fail-over support
    * Efficient storage of binary data including large 
      objects (e.g. videos)
    * Auto-sharding for cloud-level scalability (Q209)
 .
 High performance, scalability, and reasonable depth of
 functionality are the goals for the project.
 .
 This package contains the server itself.

Package: mongodb-clients
Architecture: i386 amd64
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: An object/document-oriented database (client apps)
 MongoDB is a high-performance, open source, schema-free 
 document-oriented  data store that's easy to deploy, manage
 and use. It's network accessible, written in C++ and offers
 the following features :
 .
    * Collection oriented storage - easy storage of object-
      style data
    * Full index support, including on inner objects
    * Query profiling
    * Replication and fail-over support
    * Efficient storage of binary data including large 
      objects (e.g. videos)
    * Auto-sharding for cloud-level scalability (Q209)
 .
 High performance, scalability, and reasonable depth of
 functionality are the goals for the project.
 .
 This package contains the various client applications.

Package: mongodb-dev
Architecture: i386 amd64
Depends: mongodb-server, ${shlibs:Depends}, ${misc:Depends}
Description: An object/document-oriented database (development)
 MongoDB is a high-performance, open source, schema-free 
 document-oriented  data store that's easy to deploy, manage
 and use. It's network accessible, written in C++ and offers
 the following features :
 .
    * Collection oriented storage - easy storage of object-
      style data
    * Full index support, including on inner objects
    * Query profiling
    * Replication and fail-over support
    * Efficient storage of binary data including large 
      objects (e.g. videos)
    * Auto-sharding for cloud-level scalability (Q209)
 .
 High performance, scalability, and reasonable depth of
 functionality are the goals for the project.
 .
 Development headers and libraries.

