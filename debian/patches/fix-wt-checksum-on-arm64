Author: Apollon Oikonomopoulos <apoikos@debian.org>
Description: WT: fix ARM64_HOST detection
 Currently the ARM64 build is broken because checksum/crc32-arm64.c is not
 pulled in and __wt_checksum_init remains undefined.
 .
 Fix ARM64 detection by including both 'aarch64' and 'arm64' target
 architectures.
Last-Update: 2016-12-15
Forwarded: no
--- a/src/third_party/wiredtiger/SConscript
+++ b/src/third_party/wiredtiger/SConscript
@@ -133,7 +133,7 @@
     'POSIX_HOST'   : not env.TargetOSIs('windows'),
     'WINDOWS_HOST' : env.TargetOSIs('windows'),
 
-    'ARM64_HOST'   : env['TARGET_ARCH'] == 'aarch64',
+    'ARM64_HOST'   : env['TARGET_ARCH'] in ('aarch64', 'arm64'),
     'POWERPC_HOST' : env['TARGET_ARCH'] == 'ppc64le',
     'X86_HOST'     : env['TARGET_ARCH'] == 'x86_64',
     'ZSERIES_HOST' : env['TARGET_ARCH'] == 's390x',
@@ -165,7 +165,7 @@
 # On zSeries we may disable because SLES 11 kernel doe not support the instructions.
 if not (env['TARGET_ARCH'] == 's390x' and get_option("use-s390x-crc32") == "off"):
     # Disable ARM hardware CRC for now - the extensions aren't always available
-    if env['TARGET_ARCH'] != 'aarch64':
+    if env['TARGET_ARCH'] not in ('aarch64', 'arm64'):
         env.Append(CPPDEFINES=["HAVE_CRC32_HARDWARE"])
 
 wtlib = env.Library(
